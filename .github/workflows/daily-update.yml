name: Daily Articles Update

on:
  workflow_dispatch: {}
  schedule:
    - cron: '15 5 * * *'  # 05:15 UTC (~07:15 Europe/Madrid en verano)

permissions:
  contents: write

concurrency:
  group: daily-articles-update
  cancel-in-progress: true

env:
  TZ: Europe/Madrid
  PY_JSON: workspace/astro/public/articles_py.json
  JS_JSON: workspace/astro/public/articles_js.json
  FINAL_JSON: workspace/astro/public/articles.json
  TRANSLATE_IN_FETCH: '0'
  DEEPL_SLEEP_MS: '1200'
  DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: ⬇️ Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq installed
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: 🐍 Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 📦 Install Python deps
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests feedparser beautifulsoup4 python-dateutil arxiv deep-translator
          fi

      - name: 🟦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 🟩 Enable pnpm (Corepack) o instalarlo si falta
        run: |
          set -euo pipefail
          corepack enable || true
          corepack prepare pnpm@9 --activate || true
          if ! command -v pnpm >/dev/null 2>&1; then
            npm i -g pnpm@9
          fi
          pnpm --version

      - name: 📦 Install Node deps (prefer pnpm; fallback npm)
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ] && command -v pnpm >/dev/null 2>&1; then
            [ -f package.json ] && pnpm install --frozen-lockfile
            if [ -f workspace/astro/package.json ]; then
              pnpm -C workspace/astro install --frozen-lockfile || pnpm -C workspace/astro install
            fi
          else
            if [ -f package.json ]; then
              if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
            fi
            if [ -f workspace/astro/package.json ]; then
              (cd workspace/astro && if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi)
            fi
          fi

      - name: 🐍 Run data_pipeline.py → articles_py.json (timeout 8m, logs en vivo)
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          echo "🔎 Buscando data_pipeline.py..."
          find . -maxdepth 3 -type f -name "data_pipeline.py" -print || true
          python -V
          TARGET=""
          for CAND in \
            "data_pipeline.py" \
            "workspace/data_pipeline.py" \
            "scripts/data_pipeline.py" \
            "workspace/scripts/data_pipeline.py" \
            "workspace/astro/scripts/data_pipeline.py" \
            "workspace/astro/data_pipeline.py"; do
            if [ -f "$CAND" ]; then TARGET="$CAND"; break; fi
          done
          if [ -z "$TARGET" ]; then
            echo "❌ No se encontró data_pipeline.py" && exit 1
          fi
          echo "▶ Ejecutando $TARGET"
          timeout 8m python "$TARGET"

      - name: 🟦 Run fetch-articles.js → articles_js.json
        run: |
          set -euo pipefail
          node -v
          if [ -f scripts/fetch-articles.js ]; then
            node scripts/fetch-articles.js
          elif [ -f workspace/scripts/fetch-articles.js ]; then
            node workspace/scripts/fetch-articles.js
          elif [ -f fetch-articles.js ]; then
            node fetch-articles.js
          elif [ -f workspace/fetch-articles.js ]; then
            node workspace/fetch-articles.js
          else
            echo "❌ No se encontró fetch-articles.js" && exit 1
          fi

      - name: 🟦 Run merge-articles.js → articles.json
        run: |
          set -euo pipefail
          if [ -f scripts/merge-articles.js ]; then
            node scripts/merge-articles.js
          elif [ -f workspace/scripts/merge-articles.js ]; then
            node workspace/scripts/merge-articles.js
          elif [ -f merge-articles.js ]; then
            node merge-articles.js
          elif [ -f workspace/merge-articles.js ]; then
            node workspace/merge-articles.js
          else
            echo "❌ No se encontró merge-articles.js" && exit 1
          fi
      - name: 🔍 Diff vs HEAD (¿hay URLs nuevas?)
        run: |
          set -euo pipefail
          # extrae URLs del HEAD anterior (si existe) y del JSON actual
          PREV=$(mktemp)
          CURR=$(mktemp)
          if git cat-file -e HEAD^{commit} 2>/dev/null; then
          git show HEAD:${{ env.FINAL_JSON }} 2>/dev/null | jq -r '.[].url' | sort -u > "$PREV" || true
          fi
          jq -r '.[].url' ${{ env.FINAL_JSON }} | sort -u > "$CURR"
          echo "::group::Resumen"
          echo "Previas: $(wc -l < "$PREV" || echo 0)"
          echo "Actuales: $(wc -l < "$CURR")"
          echo "Nuevas hoy:"
          comm -13 "$PREV" "$CURR" | sed 's/^/  + /' || true
          echo "::endgroup::"

    # listado rápido por fuente (top 10)
          echo "::group::Top por fuente (10)"
          jq -r '.[].source' ${{ env.FINAL_JSON }} | sort | uniq -c | sort -nr | head -10
          echo "::endgroup::"

      - name: 🟨 Crear script ensure-title-es.mjs (si no existe)
        run: |
          set -euo pipefail
          mkdir -p scripts
          if [ ! -f scripts/ensure-title-es.mjs ]; then
            cat > scripts/ensure-title-es.mjs <<'JS'
          // scripts/ensure-title-es.mjs
          // - Solo escribe title_es si la traducción es DIFERENTE del title.
          // - Fuerza EN para fuentes típicamente en inglés (detección por subcadena).
          // - Fallback a MyMemory si DeepL devuelve igual o null.
          // - Maneja 403/429/456 y respeta pausas/cuota.

          import fs from "fs/promises";

          const FINAL_JSON = process.env.FINAL_JSON || "workspace/astro/public/articles.json";
          const SLEEP_MS = Number(process.env.DEEPL_SLEEP_MS || process.env.SLEEP_MS || 1200);
          const MAX_TITLES = Number(process.env.TITLES_PER_RUN || 500);

          const DEEPL_API_KEY = process.env.DEEPL_API_KEY || "";
          const isFreeKey = /:fx$/i.test(DEEPL_API_KEY) || /^fk[-_]/i.test(DEEPL_API_KEY);
          const DEEPL_ENDPOINT =
            process.env.DEEPL_ENDPOINT || (isFreeKey ? "https://api-free.deepl.com" : "https://api.deepl.com");

          // tokens para detectar fuentes en inglés por subcadena (lowercase)
          const EN_TOKENS = [
            "nature", "science.org", "science ", "aaas", "arxiv", "pubmed",
            "sciencedaily", "phys.org", "quanta", "mit news", "nasa", "esa",
            "pnas", "plos one", "science news", "explores", "nih", "nci", "cern"
          ];

          const sleep = (ms) => new Promise((r) => setTimeout(r, ms));

          function looksEnglishSource(src = "") {
            const s = String(src).toLowerCase();
            return EN_TOKENS.some(tok => s.includes(tok));
          }

          async function deeplTranslate(text, forceEN = false) {
            if (!DEEPL_API_KEY) return { noKey: true };
            const body = new URLSearchParams({
              auth_key: DEEPL_API_KEY,
              text,
              target_lang: "ES",
              preserve_formatting: "1",
              split_sentences: "0",
            });
            if (forceEN) body.set("source_lang", "EN");
            const res = await fetch(`${DEEPL_ENDPOINT}/v2/translate`, {
              method: "POST",
              headers: { "Content-Type": "application/x-www-form-urlencoded" },
              body,
            });
            if (res.status === 403) return { forbidden: true };
            if (res.status === 429 || res.status === 456) return { rateLimited: true };
            if (!res.ok) return null;
            const data = await res.json();
            const t = data?.translations?.[0]?.text;
            return t ? { text: t } : null;
          }

          // Fallback muy ligero a MyMemory (gratuito, sin clave). EN→ES
          async function fallbackMyMemoryENES(text) {
            const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|es`;
            const res = await fetch(url, { headers: { "User-Agent": "curioscience-bot/1.0" } });
            if (!res.ok) return null;
            const data = await res.json();
            const t = data?.responseData?.translatedText;
            return t && typeof t === "string" ? t : null;
          }

          function needsTranslationTitle(it) {
            const t = (it.title || "").trim();
            const te = (it.title_es || "").trim();
            if (!t) return false;
            if (!te || te.length === 0) return true;
            return te === t; // idéntico al original ⇒ volver a intentar
          }

          function norm(x) {
            return String(x || "").trim().replace(/\s+/g, " ");
          }

          (async () => {
            if (!DEEPL_API_KEY) {
              console.error("❌ Falta DEEPL_API_KEY en Secrets.");
              process.exit(1);
            }
            console.log(`Using DeepL endpoint: ${DEEPL_ENDPOINT} (freeKey=${isFreeKey})`);

            const raw = await fs.readFile(FINAL_JSON, "utf8");
            const arr = JSON.parse(raw);
            let changed = 0, attempted = 0, limited = false, forbidden = false;

            for (const it of arr) {
              if (attempted >= MAX_TITLES) break;
              if (!needsTranslationTitle(it)) continue;

              const title = norm(it.title);
              if (!title) continue;

              const forceEN = looksEnglishSource(it.source);
              let out = await deeplTranslate(title, forceEN);

              // Si DeepL no traduce o devuelve igual, intentamos fallback EN→ES
              let translated = out?.text;
              if (!translated || norm(translated) === title) {
                if (forceEN) {
                  const fb = await fallbackMyMemoryENES(title);
                  if (fb && norm(fb) !== title) translated = fb;
                }
              }

              if (out?.forbidden) { forbidden = true; break; }
              if (out?.rateLimited) { limited = true; break; }

              if (translated && norm(translated) !== title) {
                it.title_es = translated;
                changed++;
              }
              attempted++;
              await sleep(SLEEP_MS);
            }

            if (changed > 0) {
              await fs.writeFile(FINAL_JSON, JSON.stringify(arr, null, 2), "utf8");
            }
            console.log(`ensure-title-es: traducidos ${changed}, intentos ${attempted}, rateLimited=${limited}, forbidden=${forbidden}`);
            if (forbidden) {
              console.error("❌ DeepL 403: clave/endpoint incorrectos (FREE → api-free.deepl.com, PRO → api.deepl.com).");
              process.exit(1);
            }
          })().catch((e) => { console.error(e); process.exit(1); });
          JS
          fi

      - name: 🟨 Ensure title_es post-merge (DeepL + fallbacks)
        env:
          # Desactiva DeepL si estás en 456; usa solo fallbacks
          DISABLE_DEEPL: '1'
          # Si tienes una instancia de LibreTranslate, úsala (mejor que MyMemory)
          LIBRETRANSLATE_URL: https://libretranslate.com
          LIBRETRANSLATE_API_KEY: ''
          # Si DeepL está activo y devuelve 429/456, seguir con fallbacks
          FALLBACK_ON_RATELIMIT: '1'
          FALLBACK_MAX: '400'
          # DeepL vars (por si vuelves a activarlo)
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          DEEPL_ENDPOINT: ${{ vars.DEEPL_ENDPOINT }}
          # Ritmo y lote
          DEEPL_SLEEP_MS: '0'
          TITLES_PER_RUN: '300'
          FINAL_JSON: ${{ env.FINAL_JSON }}
        run: |
            set -euo pipefail
            node scripts/ensure-title-es.mjs

