name: Daily Articles Update

on:
  workflow_dispatch: {}          # ‚Üê habilita bot√≥n "Run workflow"
  schedule:
    - cron: '15 5 * * *'         # 05:15 UTC (~07:15 Madrid en verano)

permissions:
  contents: write

concurrency:
  group: daily-articles-update
  cancel-in-progress: true

env:
  TZ: Europe/Madrid
  PY_JSON: workspace/astro/public/articles_py.json
  JS_JSON: workspace/astro/public/articles_js.json
  FINAL_JSON: workspace/astro/public/articles.json

  # Traducci√≥n de t√≠tulos (por defecto, sin DeepL: fallbacks gratis)
  DISABLE_DEEPL: '1'                    # pon '0' si quieres usar DeepL
  DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
  DEEPL_ENDPOINT: ${{ vars.DEEPL_ENDPOINT }}
  TITLES_PER_RUN: '300'
  DEEPL_SLEEP_MS: '0'
  FALLBACK_ON_RATELIMIT: '1'
  FALLBACK_MAX: '400'
  LIBRETRANSLATE_URL: https://libretranslate.com
  LIBRETRANSLATE_API_KEY: ''

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîß Ensure jq
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      # ---------- Python ----------
      - name: üêç Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Python deps
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests feedparser beautifulsoup4 python-dateutil arxiv deep-translator
          fi

      # ---------- Node (simple, con fallback a npm) ----------
      - name: üü¶ Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üì¶ Install Node deps
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ]; then
            corepack enable || true
            corepack prepare pnpm@9 --activate || true
            command -v pnpm >/dev/null 2>&1 || npm i -g pnpm@9
            if [ -f package.json ]; then pnpm install --frozen-lockfile || pnpm install; fi
            if [ -f workspace/astro/package.json ]; then pnpm -C workspace/astro install --frozen-lockfile || pnpm -C workspace/astro install; fi
          else
            if [ -f package.json ]; then
              if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
            fi
            if [ -f workspace/astro/package.json ]; then
              (cd workspace/astro && if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi)
            fi
          fi

      # ---------- Pipeline ----------
      - name: üêç Run data_pipeline.py ‚Üí articles_py.json (timeout 8m)
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          python -V
          TARGET=""
          for CAND in \
            "data_pipeline.py" \
            "workspace/data_pipeline.py" \
            "scripts/data_pipeline.py" \
            "workspace/scripts/data_pipeline.py" \
            "workspace/astro/scripts/data_pipeline.py" \
            "workspace/astro/data_pipeline.py"; do
            if [ -f "$CAND" ]; then TARGET="$CAND"; break; fi
          done
          if [ -z "$TARGET" ]; then
            echo "‚ùå No se encontr√≥ data_pipeline.py" && exit 1
          fi
          timeout 8m python "$TARGET"

      - name: üü¶ Run fetch-articles.js ‚Üí articles_js.json
        run: |
          set -euo pipefail
          node -v
          if   [ -f scripts/fetch-articles.js ]; then node scripts/fetch-articles.js
          elif [ -f workspace/scripts/fetch-articles.js ]; then node workspace/scripts/fetch-articles.js
          elif [ -f fetch-articles.js ]; then node fetch-articles.js
          elif [ -f workspace/fetch-articles.js ]; then node workspace/fetch-articles.js
          else echo "‚ùå No se encontr√≥ fetch-articles.js"; exit 1; fi

      - name: üü¶ Run merge-articles.js ‚Üí articles.json
        run: |
          set -euo pipefail
          if   [ -f scripts/merge-articles.js ]; then node scripts/merge-articles.js
          elif [ -f workspace/scripts/merge-articles.js ]; then node workspace/scripts/merge-articles.js
          elif [ -f merge-articles.js ]; then node merge-articles.js
          elif [ -f workspace/merge-articles.js ]; then node workspace/merge-articles.js
          else echo "‚ùå No se encontr√≥ merge-articles.js"; exit 1; fi

      # ---------- Traducci√≥n de t√≠tulos (post-merge) ----------
      - name: üü® Ensure title_es post-merge (DeepL + fallbacks)
        run: |
          set -euo pipefail
          if [ ! -f scripts/ensure-title-es.mjs ]; then
            echo "‚ö†Ô∏è Falta scripts/ensure-title-es.mjs. Creando m√≠nimo con fallbacks..."
            mkdir -p scripts
            cat > scripts/ensure-title-es.mjs <<'JS'
import fs from "fs/promises";
const FINAL_JSON = process.env.FINAL_JSON || "workspace/astro/public/articles.json";
const TITLES_PER_RUN = Number(process.env.TITLES_PER_RUN || 300);
const SLEEP_MS = Number(process.env.DEEPL_SLEEP_MS || 0);
const DISABLE_DEEPL = process.env.DISABLE_DEEPL === "1";
const LIBRE_URL = process.env.LIBRETRANSLATE_URL || "";
const LIBRE_API_KEY = process.env.LIBRETRANSLATE_API_KEY || "";
const EN_TOKENS = ["nature","science.org","science ","aaas","arxiv","pubmed","sciencedaily","phys.org","quanta","mit news","nasa","esa","pnas","plos one","science news","explores","nih","nci","cern"];
const norm=(x)=>String(x||"").trim().replace(/\s+/g," "); const sleep=(ms)=>new Promise(r=>setTimeout(r,ms)); const looksEN=(s="")=>EN_TOKENS.some(t=>String(s).toLowerCase().includes(t));
async function libre(t){ if(!LIBRE_URL) return null; const b={q:t,source:"en",target:"es",format:"text"}; if(LIBRE_API_KEY) b.api_key=LIBRE_API_KEY; const r=await fetch(`${LIBRE_URL}/translate`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(b)}); if(!r.ok) return null; const j=await r.json(); return j?.translatedText||null; }
async function memory(t){ const u=`https://api.mymemory.translated.net/get?q=${encodeURIComponent(t)}&langpair=en|es`; const r=await fetch(u,{headers:{"User-Agent":"curioscience-bot/1.0"}}); if(!r.ok) return null; const j=await r.json(); return j?.responseData?.translatedText||null; }
function needs(it){ const t=norm(it.title), te=norm(it.title_es); if(!t) return false; if(!te) return true; return te===t; }
(async()=>{
  const arr=JSON.parse(await fs.readFile(FINAL_JSON,"utf8"));
  const idx=[]; for(let i=0;i<arr.length;i++){ if(needs(arr[i])) idx.push(i); }
  let changed=0,attempted=0;
  for(const i of idx){
    if(attempted>=TITLES_PER_RUN) break;
    const it=arr[i]; const title=norm(it.title); if(!title) continue;
    let tr=null;
    if(looksEN(it.source)){ tr=await libre(title) || await memory(title); if(tr && norm(tr)===title) tr=null; }
    if(tr && norm(tr)!==title){ it.title_es=tr; changed++; }
    attempted++; await sleep(SLEEP_MS);
  }
  if(changed>0) await fs.writeFile(FINAL_JSON, JSON.stringify(arr,null,2), "utf8");
  console.log(`ensure-title-es: traducidos ${changed}, intentos ${attempted}`);
})().catch(e=>{ console.error(e); process.exit(1); });
JS
          fi
          node scripts/ensure-title-es.mjs

      # ---------- Quitar content_es siempre ----------
      - name: üßπ Strip content_es en articles.json
        run: |
          set -euo pipefail
          test -s "$FINAL_JSON" || (echo "‚ùå $FINAL_JSON vac√≠o" && exit 1)
          tmp=$(mktemp)
          jq 'map(del(.content_es))' "$FINAL_JSON" > "$tmp" && mv "$tmp" "$FINAL_JSON"
          echo "strip-content-es: OK"

      # ---------- Comprobaciones / build opcional ----------
      - name: ‚úÖ Quick check (existence + length)
        run: |
          set -euo pipefail
          for f in "$PY_JSON" "$JS_JSON" "$FINAL_JSON"; do
            echo "::group::Comprobando $f"
            test -s "$f" || (echo "‚ùå $f no existe o est√° vac√≠o" && exit 1)
            jq 'length' "$f" || true
            echo "::endgroup::"
          done

      - name: üèóÔ∏è Build Astro (if exists)
        if: ${{ hashFiles('workspace/astro/package.json') != '' }}
        working-directory: workspace/astro
        run: |
          if [ -f pnpm-lock.yaml ] && command -v pnpm >/dev/null 2>&1; then pnpm run build; else npm run build; fi

      - name: üì¶ Upload artifacts (JSON)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: articles-jsons
          path: |
            ${{ env.PY_JSON }}
            ${{ env.JS_JSON }}
            ${{ env.FINAL_JSON }}

      - name: üìù Commit & Push
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$PY_JSON" "$JS_JSON" "$FINAL_JSON"
          if git diff --cached --quiet; then
            echo "Sin cambios que commitear."
          else
            git commit -m "chore: daily articles update [skip ci]"
            git push
          fi
