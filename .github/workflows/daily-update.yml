name: Daily Articles Update

on:
  workflow_dispatch: {}
  schedule:
    - cron: '15 5 * * *'  # 05:15 UTC (~07:15 Europe/Madrid en verano)

permissions:
  contents: write

concurrency:
  group: daily-articles-update
  cancel-in-progress: true

env:
  TZ: Europe/Madrid
  PY_JSON: workspace/astro/public/articles_py.json
  JS_JSON: workspace/astro/public/articles_js.json
  FINAL_JSON: workspace/astro/public/articles.json
  TRANSLATE_IN_FETCH: '0'         # NO traducir summaries en fetch
  DEEPL_SLEEP_MS: '1600'
  # Puedes dejar DEEPL desactivado y usar fallbacks gratuitos mientras no haya cuota:
  DISABLE_DEEPL: '1'              # pon '0' cuando quieras volver a DeepL
  # Opcional: usa una instancia de LibreTranslate (mejor que MyMemory)
  LIBRETRANSLATE_URL: https://libretranslate.com
  LIBRETRANSLATE_API_KEY: ''
  FALLBACK_ON_RATELIMIT: '1'
  FALLBACK_MAX: '400'
  TITLES_PER_RUN: '300'
  DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
  DEEPL_ENDPOINT: ${{ vars.DEEPL_ENDPOINT }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq installed
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Python deps
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests feedparser beautifulsoup4 python-dateutil arxiv deep-translator
          fi

      - name: üü¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üü© Enable pnpm (Corepack) o instalarlo si falta
        run: |
          set -euo pipefail
          corepack enable || true
          corepack prepare pnpm@9 --activate || true
          if ! command -v pnpm >/dev/null 2>&1; then
            npm i -g pnpm@9
          fi
          pnpm --version

      - name: üì¶ Install Node deps (prefer pnpm; fallback npm)
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ] && command -v pnpm >/dev/null 2>&1; then
            [ -f package.json ] && pnpm install --frozen-lockfile
            if [ -f workspace/astro/package.json ]; then
              pnpm -C workspace/astro install --frozen-lockfile || pnpm -C workspace/astro install
            fi
          else
            if [ -f package.json ]; then
              if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
            fi
            if [ -f workspace/astro/package.json ]; then
              (cd workspace/astro && if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi)
            fi
          fi

      - name: üêç Run data_pipeline.py ‚Üí articles_py.json (timeout 8m, logs en vivo)
        env:
          PYTHONUNBUFFERED: "1"
        run: |
          set -euo pipefail
          echo "üîé Buscando data_pipeline.py..."
          find . -maxdepth 3 -type f -name "data_pipeline.py" -print || true
          python -V
          TARGET=""
          for CAND in \
            "data_pipeline.py" \
            "workspace/data_pipeline.py" \
            "scripts/data_pipeline.py" \
            "workspace/scripts/data_pipeline.py" \
            "workspace/astro/scripts/data_pipeline.py" \
            "workspace/astro/data_pipeline.py"; do
            if [ -f "$CAND" ]; then TARGET="$CAND"; break; fi
          done
          if [ -z "$TARGET" ]; then
            echo "‚ùå No se encontr√≥ data_pipeline.py" && exit 1
          fi
          echo "‚ñ∂ Ejecutando $TARGET"
          timeout 8m python "$TARGET"

      - name: üü¶ Run fetch-articles.js ‚Üí articles_js.json
        run: |
          set -euo pipefail
          node -v
          if [ -f scripts/fetch-articles.js ]; then
            node scripts/fetch-articles.js
          elif [ -f workspace/scripts/fetch-articles.js ]; then
            node workspace/scripts/fetch-articles.js
          elif [ -f fetch-articles.js ]; then
            node fetch-articles.js
          elif [ -f workspace/fetch-articles.js ]; then
            node workspace/fetch-articles.js
          else
            echo "‚ùå No se encontr√≥ fetch-articles.js" && exit 1
          fi

      - name: üü¶ Run merge-articles.js ‚Üí articles.json
        run: |
          set -euo pipefail
          if [ -f scripts/merge-articles.js ]; then
            node scripts/merge-articles.js
          elif [ -f workspace/scripts/merge-articles.js ]; then
            node workspace/scripts/merge-articles.js
          elif [ -f merge-articles.js ]; then
            node merge-articles.js
          elif [ -f workspace/merge-articles.js ]; then
            node workspace/merge-articles.js
          else
            echo "‚ùå No se encontr√≥ merge-articles.js" && exit 1
          fi

      - name: üü® Crear script ensure-title-es.mjs (si no existe)
        run: |
          set -euo pipefail
          mkdir -p scripts
          if [ ! -f scripts/ensure-title-es.mjs ]; then
            cat > scripts/ensure-title-es.mjs <<'JS'
// scripts/ensure-title-es.mjs
// - Solo escribe title_es si la traducci√≥n es DIFERENTE del title.
// - Detecta fuentes en ingl√©s por subcadenas.
// - DISABLE_DEEPL='1' ‚Üí usa LibreTranslate/MyMemory directamente.
// - Con DeepL activo: si 429/456, usa fallbacks. Nunca copia title -> title_es.

import fs from "fs/promises";

const FINAL_JSON   = process.env.FINAL_JSON || "workspace/astro/public/articles.json";
const SLEEP_MS     = Number(process.env.DEEPL_SLEEP_MS || process.env.SLEEP_MS || 1200);
const MAX_TITLES   = Number(process.env.TITLES_PER_RUN || 500);

const DEEPL_API_KEY = process.env.DEEPL_API_KEY || "";
const isFreeKey     = /:fx$/i.test(DEEPL_API_KEY) || /^fk[-_]/i.test(DEEPL_API_KEY);
const DEEPL_ENDPOINT =
  process.env.DEEPL_ENDPOINT || (isFreeKey ? "https://api-free.deepl.com" : "https://api.deepl.com");

const DISABLE_DEEPL         = process.env.DISABLE_DEEPL === "1";
const FALLBACK_ON_RATELIMIT = process.env.FALLBACK_ON_RATELIMIT === "1";
const FALLBACK_MAX          = Number(process.env.FALLBACK_MAX || 300);

const LIBRE_URL     = process.env.LIBRETRANSLATE_URL || "";
const LIBRE_API_KEY = process.env.LIBRETRANSLATE_API_KEY || "";

const EN_TOKENS = [
  "nature","science.org","science ","aaas","arxiv","pubmed",
  "sciencedaily","phys.org","quanta","mit news","nasa","esa",
  "pnas","plos one","science news","explores","nih","nci","cern"
];

const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));
const norm  = (x)=>String(x||"").trim().replace(/\s+/g," ");
const looksEnglishSource = (src="")=> EN_TOKENS.some(tok => String(src).toLowerCase().includes(tok));

async function deeplTranslate(text, sourceLang){
  if (!DEEPL_API_KEY) return { noKey:true };
  const body = new URLSearchParams({
    auth_key: DEEPL_API_KEY, text,
    target_lang: "ES", preserve_formatting: "1", split_sentences: "0"
  });
  if (sourceLang) body.set("source_lang", sourceLang);
  const res = await fetch(`${DEEPL_ENDPOINT}/v2/translate`, {
    method:"POST",
    headers:{ "Content-Type":"application/x-www-form-urlencoded" },
    body
  });
  if (res.status === 403) return { forbidden:true, status:403 };
  if (res.status === 429 || res.status === 456) return { rateLimited:true, status:res.status };
  if (!res.ok) { console.warn(`[DeepL] HTTP ${res.status}`); return { bad:true, status:res.status }; }
  const data = await res.json();
  const t = data?.translations?.[0]?.text;
  return t ? { text:t } : null;
}

async function libreTranslate(text, source="en", target="es"){
  if (!LIBRE_URL) return null;
  const body = { q:text, source, target, format:"text" };
  if (LIBRE_API_KEY) body.api_key = LIBRE_API_KEY;
  const res = await fetch(`${LIBRE_URL}/translate`, {
    method:"POST",
    headers:{ "Content-Type":"application/json" },
    body: JSON.stringify(body)
  });
  if (!res.ok) return null;
  const data = await res.json();
  const t = data?.translatedText;
  return t && typeof t === "string" ? t : null;
}

async function myMemoryENES(text){
  const url = `https://api.mymemory.translated.net/get?q=${encodeURIComponent(text)}&langpair=en|es`;
  const res = await fetch(url, { headers:{ "User-Agent":"curioscience-bot/1.0" } });
  if (!res.ok) return null;
  const data = await res.json();
  const t = data?.responseData?.translatedText;
  return t && typeof t === "string" ? t : null;
}

function needsTitle(it){
  const t = norm(it.title), te = norm(it.title_es);
  if (!t) return false;
  if (!te) return true;       // falta
  return te === t;            // id√©ntico ‚áí reintentar (pero nunca copiamos el original)
}

(async()=>{
  if (!DISABLE_DEEPL && !DEEPL_API_KEY){
    console.error("‚ùå Falta DEEPL_API_KEY (o usa DISABLE_DEEPL='1').");
    process.exit(1);
  }
  console.log(`DeepL: ${DISABLE_DEEPL ? "DESACTIVADO (fallbacks)" : `endpoint ${DEEPL_ENDPOINT} (freeKey=${isFreeKey})`}`);
  if (LIBRE_URL) console.log(`LibreTranslate: ${LIBRE_URL}`);

  const raw = await fs.readFile(FINAL_JSON, "utf8");
  const arr = JSON.parse(raw);

  const idx = [];
  for (let i=0;i<arr.length;i++){ if (needsTitle(arr[i])) idx.push(i); }
  console.log(`Pendientes a traducir: ${idx.length}`);
  if (!idx.length){ console.log("Nada que traducir."); return; }

  let changed=0, attempted=0, limited=false, forbidden=false, fbLibre=0, fbMemory=0, rateStatus=0;

  for (const i of idx){
    if (attempted>=MAX_TITLES) break;
    const it = arr[i];
    const title = norm(it.title);
    if (!title) continue;

    const enSource = looksEnglishSource(it.source);
    let translated = null;

    if ( DISABLE_DEEPL ){
      if (enSource){
        translated = (await libreTranslate(title,'en','es')) || (await myMemoryENES(title));
        if (translated && norm(translated) === title) translated = null;
        if (translated) { if (LIBRE_URL) fbLibre++; else fbMemory++; }
      }
    } else {
      const out = await deeplTranslate(title, enSource ? 'EN' : undefined);
      if (out?.forbidden){ forbidden=true; rateStatus=out.status||0; break; }
      if (out?.rateLimited){
        limited=true; rateStatus=out.status||0;
        if (FALLBACK_ON_RATELIMIT && enSource){
          translated = (await libreTranslate(title,'en','es')) || (await myMemoryENES(title));
          if (translated && norm(translated) === title) translated = null;
          if (translated) { if (LIBRE_URL) fbLibre++; else fbMemory++; }
        } else {
          break;
        }
      } else {
        translated = out?.text || null;
        if (!translated || norm(translated) === title){
          if (enSource){
            translated = (await libreTranslate(title,'en','es')) || (await myMemoryENES(title));
            if (translated && norm(translated) === title) translated = null;
            if (translated) { if (LIBRE_URL) fbLibre++; else fbMemory++; }
          } else {
            translated = null;
          }
        }
      }
    }

    if (translated && norm(translated) !== title){
      it.title_es = translated;
      changed++;
    }
    attempted++;
    await sleep(SLEEP_MS);
    if ((fbLibre + fbMemory) >= FALLBACK_MAX) break;
  }

  if (changed>0){
    await fs.writeFile(FINAL_JSON, JSON.stringify(arr, null, 2), "utf8");
  }
  console.log(`ensure-title-es: traducidos ${changed}, intentos ${attempted}, fbLibre=${fbLibre}, fbMyMemory=${fbMemory}, rateLimited=${limited}${rateStatus?`(${rateStatus})`:""}, forbidden=${forbidden}`);
  if (forbidden){ process.exit(1); }
})().catch(e=>{ console.error(e); process.exit(1); });
JS
          fi

      - name: üü® Ensure title_es post-merge (DeepL + fallbacks)
        run: |
          set -euo pipefail
          node scripts/ensure-title-es.mjs

      - name: üßπ Strip content_es en articles.json
        run: |
          set -euo pipefail
          mkdir -p scripts
          cat > scripts/strip-content-es.mjs <<'JS'
import fs from 'fs/promises';
const FINAL_JSON = process.env.FINAL_JSON || 'workspace/astro/public/articles.json';
const raw = await fs.readFile(FINAL_JSON, 'utf8');
const arr = JSON.parse(raw);
let removed = 0;
for (const it of arr) {
  if (Object.prototype.hasOwnProperty.call(it, 'content_es')) {
    delete it.content_es;
    removed++;
  }
}
if (removed > 0) {
  await fs.writeFile(FINAL_JSON, JSON.stringify(arr, null, 2), 'utf8');
}
console.log(`strip-content-es: eliminados ${removed} campos content_es`);
JS
          node scripts/strip-content-es.mjs

      - name: üîç Diff vs HEAD (¬øhay URLs nuevas?)
        run: |
          set -euo pipefail
          PREV=$(mktemp)
          CURR=$(mktemp)
          if git cat-file -e HEAD^{commit} 2>/dev/null; then
            git show HEAD:${{ env.FINAL_JSON }} 2>/dev/null | jq -r '.[].url' | sort -u > "$PREV" || true
          fi
          jq -r '.[].url' ${{ env.FINAL_JSON }} | sort -u > "$CURR"
          echo "::group::Resumen"
          echo "Previas: $(wc -l < "$PREV" || echo 0)"
          echo "Actuales: $(wc -l < "$CURR")"
          echo "Nuevas hoy:"
          comm -13 "$PREV" "$CURR" | sed 's/^/  + /' || true
          echo "::endgroup::"
          echo "::group::Top por fuente (10)"
          jq -r '.[].source' ${{ env.FINAL_JSON }} | sort | uniq -c | sort -nr | head -10
          echo "::endgroup::"

      - name: ‚úÖ Quick check (existence + length)
        run: |
          set -euo pipefail
          for f in "$PY_JSON" "$JS_JSON" "$FINAL_JSON"; do
            echo "::group::Comprobando $f"
            test -s "$f" || (echo "‚ùå $f no existe o est√° vac√≠o" && exit 1)
            jq 'length' "$f" || true
            echo "::endgroup::"
          done

      - name: üèóÔ∏è Build Astro (if exists)
        if: ${{ hashFiles('workspace/astro/package.json') != '' }}
        working-directory: workspace/astro
        run: |
          if command -v pnpm >/dev/null 2>&1 && [ -f pnpm-lock.yaml ]; then pnpm run build; else npm run build; fi

      - name: üì¶ Upload artifacts (JSON)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: articles-jsons
          path: |
            ${{ env.PY_JSON }}
            ${{ env.JS_JSON }}
            ${{ env.FINAL_JSON }}

      - name: üìù Commit & Push
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$PY_JSON" "$JS_JSON" "$FINAL_JSON"
          if git diff --cached --quiet; then
            echo "Sin cambios que commitear."
          else
            git commit -m "chore: daily articles update [skip ci]"
            git push
          fi
