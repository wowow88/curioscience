name: Daily Articles Update

on:
  workflow_dispatch:
    inputs:
      run_backfill:
        description: "Ejecutar backfill de traducciones (histórico)"
        required: false
        default: "false"
      backfill_limit:
        description: "Máximo de artículos a traducir en backfill"
        required: false
        default: "400"
      sleep_ms:
        description: "Pausa entre llamadas DeepL (ms)"
        required: false
        default: "800"
  schedule:
    - cron: "15 5 * * *" # 05:15 UTC ≈ 07:15 Europa/Madrid (verano)

permissions:
  contents: write

concurrency:
  group: "daily-articles-update"
  cancel-in-progress: true

env:
  TZ: Europe/Madrid
  PY_JSON: workspace/astro/public/articles_py.json
  JS_JSON: workspace/astro/public/articles_js.json
  FINAL_JSON: workspace/astro/public/articles.json
  USER_AGENT: curioscience-bot/1.0 (+https://tu-dominio)
  TRANSLATE_LIMIT: 200

jobs:
  update:
    runs-on: ubuntu-latest
    env:
      DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
      DEEPL_ENDPOINT: ${{ vars.DEEPL_ENDPOINT }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias Python
        run: |
          set -euo pipefail
          pip install --upgrade pip
          pip install requests feedparser beautifulsoup4 python-dateutil arxiv deep-translator

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Instalar dependencias Node (root y Astro si aplican)
        run: |
          set -euo pipefail
          if [ -f package.json ]; then
            if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
          else
            echo '{"name":"ci-temp","private":true,"type":"module"}' > package.json
            npm install --no-audit --no-fund
          fi
          npm install --no-audit --no-fund node-fetch@3 rss-parser franc
          if [ -f workspace/astro/package.json ]; then
            pushd workspace/astro
            if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
            popd
          fi

      - name: Ejecutar data_pipeline.py (genera articles_py.json)
        run: |
          set -euo pipefail
          python -V
          if [ -f data_pipeline.py ]; then
            python data_pipeline.py
          elif [ -f workspace/data_pipeline.py ]; then
            python workspace/data_pipeline.py
          else
            echo "No se encontró data_pipeline.py" && exit 1
          fi

      - name: Ejecutar fetch-articles.js (genera articles_js.json)
        run: |
          set -euo pipefail
          node -v
          if [ -f scripts/fetch-articles.js ]; then
            node scripts/fetch-articles.js
          elif [ -f workspace/scripts/fetch-articles.js ]; then
            node workspace/scripts/fetch-articles.js
          elif [ -f fetch-articles.js ]; then
            node fetch-articles.js
          elif [ -f workspace/fetch-articles.js ]; then
            node workspace/fetch-articles.js
          else
            echo "No se encontró fetch-articles.js" && exit 1
          fi

      - name: Ejecutar merge-articles.js (fusiona en articles.json)
        run: |
          set -euo pipefail
          if [ -f scripts/merge-articles.js ]; then
            node scripts/merge-articles.js
          elif [ -f workspace/scripts/merge-articles.js ]; then
            node workspace/scripts/merge-articles.js
          elif [ -f merge-articles.js ]; then
            node merge-articles.js
          elif [ -f workspace/merge-articles.js ]; then
            node workspace/merge-articles.js
          else
            echo "No se encontró merge-articles.js" && exit 1
          fi

      - name: Validación rápida de archivos generados
        run: |
          set -euo pipefail
          for f in "$PY_JSON" "$JS_JSON" "$FINAL_JSON"; do
            echo "::group::Comprobando $f"
            test -s "$f" || (echo "$f no existe o está vacío" && exit 1)
            jq . "$f" >/dev/null
            count=$(jq 'length' "$f")
            echo "$f OK. Entradas: $count"
            echo "Primeras 3 entradas:"
            jq -c '.[0:3]' "$f" || true
            echo "::endgroup::"
          done

      - name: Validar fusión: superset + sin duplicados + orden fecha
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const base = 'workspace/astro/public';
            const files = { py: `${base}/articles_py.json`, js: `${base}/articles_js.json`, merged: `${base}/articles.json` };

            const norm = (v) => {
              const s = String(v || '').trim();
              if (!s) return '';
              try {
                const u = new URL(s);
                u.hash = '';
                u.search = '';
                return u.toString().toLowerCase();
              } catch {
                return s.toLowerCase().replace(/[#?].*$/, '');
              }
            };
            const id = (it) => {
              const doi = it.doi || it.DOI;
              if (doi && String(doi).trim() !== '') return `doi:${String(doi).trim().toLowerCase()}`;
              return norm(it.url || it.link || it.id || it.ID || '');
            };
            const read = (p) => JSON.parse(fs.readFileSync(p, 'utf8'));
            const t = (it) => {
              const d = it.date || it.published || it.publishedAt || it.datePublished || '';
              const tt = Date.parse(d);
              return Number.isFinite(tt) ? tt : 0;
            };

            const py = read(files.py), js = read(files.js), merged = read(files.merged);
            core.info(`PY: ${py.length} | JS: ${js.length} | MERGED: ${merged.length}`);

            const mergedIds = new Set(merged.map(id));
            const missPy = py.filter(x => !mergedIds.has(id(x)));
            const missJs = js.filter(x => !mergedIds.has(id(x)));
            if (missPy.length || missJs.length) {
              if (missPy.length) core.error('Faltan de PY: ' + missPy.map(id).slice(0,20).join(', '));
              if (missJs.length) core.error('Faltan de JS: ' + missJs.map(id).slice(0,20).join(', '));
              core.setFailed('articles.json NO es superset de PY+JS');
            } else {
              core.info('Superset OK.');
            }

            const seen = new Set();
            for (const it of merged) {
              const k = id(it);
              if (seen.has(k)) { core.setFailed('Duplicados en articles.json (ej.: ' + k + ')'); break; }
              seen.add(k);
            }
            if (seen.size === merged.length) core.info('Sin duplicados.');

            for (let i = 1; i < merged.length; i++) {
              if (t(merged[i]) > t(merged[i-1])) { core.setFailed('No está ordenado por fecha desc.'); break; }
            }
            core.info('Orden por fecha descendente OK.');

      - name: Proteger histórico (>20% menos que el commit previo)
        run: |
          set -euo pipefail
          CUR=$(jq 'length' "$FINAL_JSON")
          PREV=$(git show HEAD:"$FINAL_JSON" 2>/dev/null | jq 'length' || echo 0)
          echo "Anterior: $PREV | Actual: $CUR"
          if [ "$PREV" -gt 0 ]; then
            LIMITE=$(( PREV * 80 / 100 ))
            if [ "$CUR" -lt "$LIMITE" ]; then
              echo "El total actual ($CUR) es >20% menor que el anterior ($PREV)." && exit 1
            fi
          fi

      - name: Backfill traducciones históricas (opcional)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_backfill == 'true' }}
        env:
          BACKFILL_LIMIT: ${{ github.event.inputs.backfill_limit }}
          SLEEP_MS: ${{ github.event.inputs.sleep_ms }}
        run: |
          set -euo pipefail
          if [ -f scripts/backfill-translate.js ]; then
            node scripts/backfill-translate.js
          else
            echo "scripts/backfill-translate.js no existe. Sáltate este paso o súbelo al repo." && exit 1
          fi

      - name: Validación rápida tras backfill (si corrió)
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.run_backfill == 'true' }}
        run: |
          set -euo pipefail
          f="$FINAL_JSON"
          test -s "$f" || (echo "$f no existe o está vacío" && exit 1)
          jq . "$f" >/dev/null
          echo "Entradas: $(jq 'length' "$f")"
          echo "Primeras 3 entradas:"; jq -c '.[0:3]' "$f" || true

      - name: Build Astro (opcional)
        if: ${{ hashFiles('workspace/astro/package.json') != '' }}
        working-directory: workspace/astro
        run: npm run build

      - name: Subir artefactos (JSON intermedios y final)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: articles-jsons
          path: |
            ${{ env.PY_JSON }}
            ${{ env.JS_JSON }}
            ${{ env.FINAL_JSON }}

      - name: Commit & Push de artículos
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$PY_JSON" "$JS_JSON" "$FINAL_JSON"
          if git diff --cached --quiet; then
            echo "Sin cambios que commitear."
          else
            git commit -m "chore: daily articles update [skip ci]"
            git push
          fi

