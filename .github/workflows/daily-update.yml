name: Daily Articles Update

on:
  workflow_dispatch: {}
  schedule:
    - cron: '15 5 * * *'  # 05:15 UTC (~07:15 Europe/Madrid en verano)

permissions:
  contents: write

concurrency:
  group: daily-articles-update
  cancel-in-progress: true

env:
  TZ: Europe/Madrid
  PY_JSON: workspace/astro/public/articles_py.json
  JS_JSON: workspace/astro/public/articles_js.json
  FINAL_JSON: workspace/astro/public/articles.json
  TRANSLATE_IN_FETCH: '0'
  DEEPL_SLEEP_MS: '1200'
  DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Ensure jq installed
        run: |
          set -euo pipefail
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y jq
          fi

      - name: üêç Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: üì¶ Install Python deps
        run: |
          set -euo pipefail
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          else
            pip install requests feedparser beautifulsoup4 python-dateutil arxiv deep-translator
          fi

      - name: üü¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: üü© Enable pnpm (Corepack) o instalarlo si falta
        run: |
          set -euo pipefail
          corepack enable || true
          corepack prepare pnpm@9 --activate || true
          if ! command -v pnpm >/dev/null 2>&1; then
            npm i -g pnpm@9
          fi
          pnpm --version

      - name: üì¶ Install Node deps (prefer pnpm; fallback npm)
        run: |
          set -euo pipefail
          if [ -f pnpm-lock.yaml ] && command -v pnpm >/dev/null 2>&1; then
            [ -f package.json ] && pnpm install --frozen-lockfile
            if [ -f workspace/astro/package.json ]; then
              pnpm -C workspace/astro install --frozen-lockfile || pnpm -C workspace/astro install
            fi
          else
            if [ -f package.json ]; then
              if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi
            fi
            if [ -f workspace/astro/package.json ]; then
              (cd workspace/astro && if [ -f package-lock.json ]; then npm ci; else npm install --no-audit --no-fund; fi)
            fi
          fi

      - name: üêç Run data_pipeline.py ‚Üí articles_py.json
        run: |
          set -euo pipefail
          python -V
          if [ -f data_pipeline.py ]; then
            python data_pipeline.py
          elif [ -f workspace/data_pipeline.py ]; then
            python workspace/data_pipeline.py
          elif [ -f scripts/data_pipeline.py ]; then
            python scripts/data_pipeline.py
          else
            echo "‚ùå No se encontr√≥ data_pipeline.py" && exit 1
          fi

      - name: üü¶ Run fetch-articles.js ‚Üí articles_js.json
        run: |
          set -euo pipefail
          node -v
          if [ -f scripts/fetch-articles.js ]; then
            node scripts/fetch-articles.js
          elif [ -f workspace/scripts/fetch-articles.js ]; then
            node workspace/scripts/fetch-articles.js
          elif [ -f fetch-articles.js ]; then
            node fetch-articles.js
          elif [ -f workspace/fetch-articles.js ]; then
            node workspace/fetch-articles.js
          else
            echo "‚ùå No se encontr√≥ fetch-articles.js" && exit 1
          fi

      - name: üü¶ Run merge-articles.js ‚Üí articles.json
        run: |
          set -euo pipefail
          if [ -f scripts/merge-articles.js ]; then
            node scripts/merge-articles.js
          elif [ -f workspace/scripts/merge-articles.js ]; then
            node workspace/scripts/merge-articles.js
          elif [ -f merge-articles.js ]; then
            node merge-articles.js
          elif [ -f workspace/merge-articles.js ]; then
            node workspace/merge-articles.js
          else
            echo "‚ùå No se encontr√≥ merge-articles.js" && exit 1
          fi

      - name: üü® Crear script ensure-title-es.mjs (si no existe)
        run: |
          set -euo pipefail
          mkdir -p scripts
          if [ ! -f scripts/ensure-title-es.mjs ]; then
            cat > scripts/ensure-title-es.mjs <<'JS'
          // scripts/ensure-title-es.mjs
          // Asegura title_es traducido en workspace/astro/public/articles.json
          // - Solo traduce si falta, est√° vac√≠o o es id√©ntico al title.
          // - Fuerza EN para fuentes com√∫nmente en ingl√©s.
          // - Respeta cuota DeepL con pausas. No toca fecha/orden.

          import fs from 'fs/promises';

          const FINAL_JSON = process.env.FINAL_JSON || 'workspace/astro/public/articles.json';
          const SLEEP_MS = Number(process.env.DEEPL_SLEEP_MS || process.env.SLEEP_MS || 1200);
          const MAX_TITLES = Number(process.env.TITLES_PER_RUN || 500);

          const DEEPL_API_KEY = process.env.DEEPL_API_KEY || '';
          const DEEPL_ENDPOINT = process.env.DEEPL_ENDPOINT || (DEEPL_API_KEY.startsWith('fk') ? 'https://api-free.deepl.com' : 'https://api.deepl.com');

          const knownEnglish = new Set(['Nature','Science.org','Science','AAAS','arXiv','PubMed','ScienceDaily','Phys.org','Quanta Magazine','MIT News','NASA','ESA','PNAS','PLOS ONE']);

          const sleep = (ms)=>new Promise(r=>setTimeout(r,ms));

          async function deeplTranslate(text, forceEN=false){
            if (!DEEPL_API_KEY) return null;
            const body = new URLSearchParams({ auth_key: DEEPL_API_KEY, text, target_lang: 'ES', preserve_formatting: '1', split_sentences: '0' });
            if (forceEN) body.set('source_lang','EN');
            const res = await fetch(`${DEEPL_ENDPOINT}/v2/translate`, { method:'POST', headers:{'Content-Type':'application/x-www-form-urlencoded'}, body });
            if (res.status===429 || res.status===456){ console.warn(`[DeepL] rate/quota: HTTP ${res.status}`); return { rateLimited:true }; }
            if (!res.ok){ console.warn(`[DeepL] HTTP ${res.status}`); return null; }
            const data = await res.json();
            const t = data?.translations?.[0]?.text;
            return t ? { text:t } : null;
          }

          function needsTranslationTitle(it){
            const t = (it.title||'').trim();
            const te = (it.title_es||'').trim();
            if (!t) return false;
            if (!te || te.length===0) return true;
            if (te === t) return true;
            if (knownEnglish.has(it.source||'') && te === t) return true;
            return false;
          }

          (async()=>{
            const raw = await fs.readFile(FINAL_JSON,'utf8');
            const arr = JSON.parse(raw);
            let changed=0, attempted=0, limited=false;
            for (const it of arr){
              if (attempted>=MAX_TITLES) break;
              if (!needsTranslationTitle(it)) continue;
              const title = (it.title||'').trim();
              if (!title) continue;
              const forceEN = knownEnglish.has(it.source||'');
              const out = await deeplTranslate(title, forceEN);
              if (out?.rateLimited){ limited=true; break; }
              if (out?.text && out.text !== title){ it.title_es = out.text; changed++; attempted++; await sleep(SLEEP_MS); }
              else { if (!it.title_es) it.title_es = title; attempted++; await sleep(150); }
            }
            if (changed>0){ await fs.writeFile(FINAL_JSON, JSON.stringify(arr,null,2),'utf8'); }
            console.log(`ensure-title-es: traducidos ${changed}, intentos ${attempted}, rateLimited=${limited}`);
          })().catch(e=>{ console.error(e); process.exit(1); });
          JS
          fi

      - name: üü® Ensure title_es post-merge (DeepL)
        env:
          DEEPL_API_KEY: ${{ secrets.DEEPL_API_KEY }}
          DEEPL_ENDPOINT: ${{ vars.DEEPL_ENDPOINT }}
          DEEPL_SLEEP_MS: '1200'
          TITLES_PER_RUN: '500'
          FINAL_JSON: ${{ env.FINAL_JSON }}
        run: |
          set -euo pipefail
          node scripts/ensure-title-es.mjs

      - name: ‚úÖ Quick check (existence + length)
        run: |
          set -euo pipefail
          for f in "$PY_JSON" "$JS_JSON" "$FINAL_JSON"; do
            echo "::group::Comprobando $f"
            test -s "$f" || (echo "‚ùå $f no existe o est√° vac√≠o" && exit 1)
            jq 'length' "$f" || true
            echo "::endgroup::"
          done

      - name: üèóÔ∏è Build Astro (if exists)
        if: ${{ hashFiles('workspace/astro/package.json') != '' }}
        working-directory: workspace/astro
        run: |
          if command -v pnpm >/dev/null 2>&1 && [ -f pnpm-lock.yaml ]; then pnpm run build; else npm run build; fi

      - name: üì¶ Upload artifacts (JSON)
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: articles-jsons
          path: |
            ${{ env.PY_JSON }}
            ${{ env.JS_JSON }}
            ${{ env.FINAL_JSON }}

      - name: üìù Commit & Push
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add "$PY_JSON" "$JS_JSON" "$FINAL_JSON"
          if git diff --cached --quiet; then
            echo "Sin cambios que commitear."
          else
            git commit -m "chore: daily articles update [skip ci]"
            git push
          fi
